/* Name: Paul Helske
 * Date: 06/20/23
 */

public class Battleship {
	public enum ShipType {Torpedo_Boat, Destroyer, Corvette, Frigate, Dreadnought};

	public String name = "";
	public int rowsize = 1;
	public int colsize = 1;
	public int row = 1;
	public int column = 1;

	public Battleship (ShipType shipType, String name, int rowsize, int colsize, int row, int column) {
		this.name = name;
		this.rowsize = rowsize;
		this.colsize = colsize;	
		this.row = row;
		this.column = column;
	}

	public boolean setPosition( int column, int row) {
		this.row = row;
		this.column = column;
		return fillGameBoard();
	}
	public void setTBoatPos() {
		int tboatX = ((int) (Math.random() * 9) + 1);
		int tboatY = ((int) (Math.random() * 8) + 1);

		setPosition(tboatY, tboatX);
		System.out.println(name + rowsize + " " + colsize + " " + row + " " + column);
		if (setPosition(tboatY, tboatX) == false) {
			System.out.println(name + " FAILED POSITIONING");
			setPosition(tboatY, tboatX);
		}
	}
	public void setDestroyerPos() {
		int destroyerX = ((int) (Math.random() * 7) + 1);
		int destroyerY = ((int) (Math.random() * 9) + 1);

		setPosition(destroyerY, destroyerX);
		System.out.println(name + rowsize + " " + colsize + " " + row + " " + column);
		if (setPosition(destroyerY, destroyerX) == false) {
			System.out.println(name + " FAILED POSITIONING");
			setPosition(destroyerY, destroyerX);
		}
	}
	public void setCorvettePos() {
		int corvetteX = ((int) (Math.random() * 9) + 1);
		int corvetteY = ((int) (Math.random() * 6) + 1);

		setPosition(corvetteY, corvetteX);
		System.out.println(name + rowsize + " " + colsize + " " + row + " " + column);
		if (setPosition(corvetteY, corvetteX) == false) {
			System.out.println(name + " FAILED POSITIONING");
			setPosition(corvetteY, corvetteX);
		}
	}
	public void setFrigatePos() {
		int frigateX = ((int) (Math.random() * 5) + 1);
		int frigateY = ((int) (Math.random() * 9) + 1);

		setPosition(frigateY, frigateX);
		System.out.println(name + rowsize + " " + colsize + " " + row + " " + column);
		if (setPosition(frigateY, frigateX) == false) {
			System.out.println(name + " FAILED POSITIONING");
			setPosition(frigateY, frigateX);
		}
	}
	public void setDreadnoughtPos() {
		int dreadnoughtX = ((int) (Math.random() * 9) + 1);
		int dreadnoughtY = ((int) (Math.random() * 4) + 1);

		setPosition(dreadnoughtY, dreadnoughtX);
		System.out.println(name + rowsize + " " + colsize + " " + row + " " + column);
		if (setPosition(dreadnoughtY, dreadnoughtX) == false) {
			System.out.println(name + " FAILED POSITIONING");
			setPosition(dreadnoughtY, dreadnoughtX);
		}
	}
	public boolean positionPiece(int row, int column) {
		//if we were able to place the piece successfully, return true;
		//else return false if we couldn't place the piece in the board;
		return true;
	}

	public boolean fillGameBoard(){
		System.out.println("FGB " + rowsize + " " + colsize + " " + row + " " + column);
	//	if (this.colsize > 1) {
			for(int i = 0; i < this.colsize; i++) {
				//if square is not water, return false and try again.
				//Then, make GameBoard give you a new row and column to work with
				if(GameBoard.board[column + i][row].state != BoardSquare.SquareState.Water) {
					for(int j = 0; j < this.colsize; j++) {
						GameBoard.board[column + j][row].setState(BoardSquare.SquareState.Water);
						System.out.println("FGB COLUMN FAILED");
					}
					return false;
				}
				GameBoard.board[column + i][row].setState(BoardSquare.SquareState.Hidden_Boat_Piece);
			}
	//	}
	//	if (this.rowsize > 1) {
			for(int i = 0; i < this.rowsize; i++) {
				if(GameBoard.board[column][row + i].state  != BoardSquare.SquareState.Water) {
					for(int j = 0; j < this.rowsize; j++) {
						GameBoard.board[column][row + j].setState(BoardSquare.SquareState.Water);
						System.out.println("FGB ROW FAILED");
					}
					return false;
				}
				GameBoard.board[column][row + i].setState(BoardSquare.SquareState.Hidden_Boat_Piece);
			}
	//	}
		return true;
	}

	public String getName() {
		return this.name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public void setRowSize(int newSize) {
		rowsize = newSize;
	}
	public int getRowSize() {
		return rowsize;
	}
	public void setColSize(int newSize) {
		colsize = newSize;
	}
	public int getColSize() {
		return colsize;
	}

	public int getRow() {
		return row;
	}
	public void setRow(int newrow) {
		row = newrow;
	}
	public int getCol() {
		return column;
	}
	public void setCol(int col) {
		column = col;
	}
}

//
//
//
//
//
//
//


public class BoardSquare {

	public enum SquareState {Water, Hidden_Boat_Piece, Exposed_Boat_Piece};
	public SquareState state = SquareState.Water;

	static int height = GameBoard.height;
	static int width = GameBoard.width;
	
	public int boatRow;
	public int boatCol;
	
	public BoardSquare(SquareState newstate, int boatRow, int boatCol) {
		state = newstate;
		// boatRow = Battleship.rowsize;
		// boatCol = Battleship.colsize;
	}
	
	public SquareState setState(SquareState newstate) {
		state = newstate;
		return state;
	}
}

//
//
//
//
//
//
//

/* Name: Paul Helske
 * Date: 06/15/2023
 */
import java.util.ArrayList;
import javafx.application.*;
import javafx.geometry.Pos;
import javafx.stage.Stage;
import javafx.scene.layout.*;
import javafx.scene.control.*;
import javafx.scene.paint.*;
import javafx.scene.shape.Rectangle;
import javafx.scene.Scene;
import javafx.scene.text.*;
import javafx.scene.layout.GridPane;
import javafx.scene.*;
import javafx.scene.shape.*;

public class GUI extends Application {
	class gameBoard{
		public int width = 10;
		public int height = 10;
	}
	static gameBoard activeBoard; 
	@Override
	public void start(Stage primaryStage) throws Exception {
		
		//Creating stage
		primaryStage.setTitle("BATTLESHIP DEMO");
		StackPane pane = new StackPane();
		GridPane map = new GridPane();
		// GridPane flag = new GridPane();
		Circle BS = new Circle(0, 0, 10);
		BS.setFill(Color.RED);

		map.add(BS, 0, 0);
		map.setHgap(3);
		map.setVgap(3);

		activeBoard = new gameBoard();
		GameBoard.instantiateGrid(map);
		Rectangle[][] rects = GameBoard.instantiateGridRects();
		GameBoard.addRectsToGrid(map, rects);
		
		int sceneH = activeBoard.height * 40;
		int sceneW = activeBoard.width * 40;
		
		pane.getChildren().addAll(map);
		Scene scene = new Scene(pane, sceneH, sceneW);
		primaryStage.setScene(scene);
		primaryStage.show();
	}
	public static void main(String[] args) {
		launch (args);
	}
}



//
//
//
//
//
//
//


import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;

public class GameBoard {

	static int height = 10;
	static int width = 10;

	static String coordinates = "";

	//Two dimensional array of board squares that

	static BoardSquare[][] board = new BoardSquare[height + 1][width + 1];

	// Creating the boats


	public static void instantiateGrid(GridPane map) {
		Text[] maprows = new Text[width];
		for (int i = 0; i < GameBoard.width; i++) {
			maprows[i] = new Text("  " + (i+1) + "  ");
			map.add(maprows[i], 0, i + 1);
		}
		Text[] mapcols = new Text[height];
		for (int i = 0; i < GameBoard.height; i++) {
			char rowName = (char) (65 + i);
			mapcols[i] = new Text("  " + rowName + "  ");
			map.add(mapcols[i], i + 1, 0);
		}
	}
	public static void checkPos() {

	}
	static int tboatX = ((int) (Math.random() * 9) + 1);
	static int tboatY = ((int) (Math.random() * 8) + 1);

	static int destroyerX = ((int) (Math.random() * 7) + 1);
	static int destroyerY = ((int) (Math.random() * 9) + 1);

	static int corvetteX = ((int) (Math.random() * 9) + 1);
	static int corvetteY = ((int) (Math.random() * 6) + 1);

	static int frigateX = ((int) (Math.random() * 5) + 1);
	static int frigateY = ((int) (Math.random() * 9) + 1);

	static int dreadnoughtX = ((int) (Math.random() * 9) + 1);
	static int dreadnoughtY = ((int) (Math.random() * 4) + 1);
	
	static Battleship tBoat = new Battleship(Battleship.ShipType.Torpedo_Boat, "Torpedo Boat", 1, 2, tboatX, tboatY);
	static Battleship destroyer = new Battleship(Battleship.ShipType.Destroyer, "Destroyer", 3, 1, destroyerX, destroyerY);
	static Battleship corvette = new Battleship(Battleship.ShipType.Corvette, "Corvette", 1, 3, corvetteX, corvetteY);
	static Battleship frigate = new Battleship(Battleship.ShipType.Frigate, "Frigate", 4, 1, frigateX, frigateY);
	static Battleship dreadnought = new Battleship(Battleship.ShipType.Dreadnought, "Dreadnought", 1, 5, dreadnoughtX, dreadnoughtY);
	
	
	public static void initializeBoard() {
		
		System.out.println("1 tBoat: " + tBoat.row + " " + tBoat.column);
		System.out.println("1 Destroyer: " + destroyer.row + " " + destroyer.column);
		System.out.println("1 Corvette: " + corvette.row + " " + corvette.column);
		System.out.println("1 Frigate: " + frigate.row + " " + frigate.column);
		System.out.println("1 Dreadnought: " + dreadnought.row + " " + dreadnought.column);
		

		for(int x = 0; x < board.length; x++) {
			for(int y = 0; y < board[x].length; y++) {
				board[x][y] = new BoardSquare(BoardSquare.SquareState.Water, x, y);
			}
		}
		//tBoat = new Battleship(Battleship.ShipType.Torpedo_Boat, "Torpedo Boat", 1, 2);
		tBoat.setTBoatPos();
//		if(tBoat.fillGameBoard() == false) {
//			//Regenerate the position
//			//try to set the position again;
//			tBoat.setTBoatPos();
//		}
		//		destroyer = new Battleship(Battleship.ShipType.Destroyer, 3, 1, destroyerX, destroyerY);
		//destroyer = new Battleship(Battleship.ShipType.Destroyer, "Destroyer", 3, 1);
		//if(destroyer.fillGameBoard() == false) {
			//Regenerate the position
			//try to set the position again;
			destroyer.setDestroyerPos();
		//}
		//		corvette = new Battleship(Battleship.ShipType.Corvette, 1, 3, corvetteX, corvetteY);
		//corvette = new Battleship(Battleship.ShipType.Corvette, "Corvette", 1, 3);
		//if(corvette.fillGameBoard() == false) {
			//Regenerate the position
			//try to set the position again;
			corvette.setCorvettePos();
	//	} 
		//		frigate = new Battleship(Battleship.ShipType.Frigate, 4, 1, frigateX, frigateY);
		//frigate = new Battleship(Battleship.ShipType.Frigate, "Frigate", 4, 1);
	//	if(frigate.fillGameBoard() == false) {
			//Regenerate the position
			//try to set the position again;
			frigate.setFrigatePos();
	//	} 
		//		dreadnought = new Battleship(Battleship.ShipType.Dreadnought, 1, 5, dreadnoughtX, dreadnoughtY);
		//dreadnought = new Battleship(Battleship.ShipType.Dreadnought, "Dreadnought", 1, 5);
		//if(dreadnought.fillGameBoard() == false) {
			//Regenerate the position
			//try to set the position again;
			dreadnought.setDreadnoughtPos();
	//	}
		System.out.println("tBoat: " + tBoat.row + " " + tBoat.column);
		System.out.println("Destroyer: " + destroyer.row + " " + destroyer.column);
		System.out.println("Corvette: " + corvette.row + " " + corvette.column);
		System.out.println("Frigate: " + frigate.row + " " + frigate.column);
		System.out.println("Dreadnought: " + dreadnought.row + " " + dreadnought.column);
	}
	public static Rectangle Square() {
		Rectangle sq = new Rectangle();
		sq.setX(15);
		sq.setY(15);
		sq.setWidth(30);
		sq.setHeight(30);
		sq.setStroke(Color.DARKGRAY);
		sq.setFill(Color.AQUA);

		return sq;
	}

	public static Rectangle[][] instantiateGridRects() {
		Rectangle[][] rects = new Rectangle[height][width];
		for(int i = 0; i < height; i++) {
			for(int j = 0; j < width; j++) {
				rects[i][j] = Square();
			}
		}
		return rects;
	}

	public static void addRectsToGrid(GridPane map, Rectangle[][] rectsToAdd) {
		initializeBoard();
		for(int i = 1; i < (height + 1); i ++) {
			for(int j = 1; j < (width + 1); j++) {
				map.add(rectsToAdd[i-1][j-1], i, j);
			}
		}
		for(int i = 1; i < (height + 1); i ++) {
			for(int j = 1; j < (width + 1); j++) {
				int row = i;
				int column = j;
				char rowName = (char) (64 + i);
				int colName = j;
				rectsToAdd[i - 1][j - 1].setOnMousePressed(e -> {
					// Fire at this coordinate
					coordinates = ("" + rowName + colName);
					System.out.println("Firing at " + coordinates + "...");
					

					if (board[row][column].state == BoardSquare.SquareState.Water) {
						System.out.println("Your hit landed in water");
						System.out.println("You missed!");
						rectsToAdd[row - 1][column - 1].setFill(Color.DARKBLUE);
					} else if (board[row][column].state == BoardSquare.SquareState.Hidden_Boat_Piece) {
						System.out.println("It's a HIT!!!");
						board[row][column].setState(BoardSquare.SquareState.Exposed_Boat_Piece);
						rectsToAdd[row - 1][column - 1].setFill(Color.RED);
						//		System.out.println("You hit a " + Battleship.ShipType);
					} else if (board[row][column].state == BoardSquare.SquareState.Exposed_Boat_Piece) {
						System.out.println("This square has already been hit.\nTry again!");
					}
				});
			}
		}
	}

	public static boolean checkForBoat(int row, int column) {
		if(board[row][column].state == BoardSquare.SquareState.Hidden_Boat_Piece) {
			return true;
		}
		else return false;
	}
} 
